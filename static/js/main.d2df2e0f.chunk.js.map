{"version":3,"sources":["Messages.js","MessageInput.js","App.js","index.js"],"names":["Messages","_ref","messages","prismUrl","react_default","a","createElement","Fragment","Object","values","map","m","date","Date","Timestamp","toISOString","substr","author","Author","prismLink","concat","BlockHeight","className","key","id","href","target","rel","title","Message","MessageInput","onSend","_useState","useState","_useState2","slicedToArray","message","setMessage","sendAndClean","rows","placeholder","value","onKeyPress","ev","onChange","onClick","App","publicKey","privateKey","contractName","channel","nodeUrl","virtualChainId","address","setMessages","orbsClient","Client","verifyResponse","response","requestStatus","executionResult","transactionStatus","console","error","Error","messagesCursor","fetchMessages","_ref2","asyncToGenerator","regenerator_default","mark","_callee","query","data","newMessages","wrap","_context","prev","next","createQuery","argString","argUint64","sendQuery","sent","JSON","parse","outputArguments","length","reduce","acc","curr","ID","objectSpread","t0","log","stop","apply","this","arguments","submitMessage","_ref3","_callee2","text","_orbsClient$createTra","_orbsClient$createTra2","tx","_context2","createTransaction","sendTransaction","_x","useEffect","setInterval","src_Messages","src_MessageInput","config","process","localStorage","getItem","sender","createAccount","setItem","encodeHex","decodeHex","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d2df2e0f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Messages = ({ messages, prismUrl }) => {\n  return (\n    <>\n      {Object.values(messages).map(m => {\n        const date = new Date(m.Timestamp / 1000000)\n          .toISOString()\n          .substr(11, 12);\n        const author = m.Author.substr(0, 6);\n        const prismLink = `${prismUrl}/block/${m.BlockHeight}`;\n        return (\n          <div className=\"row\" key={m.id}>\n            <div className=\"column column-10\">\n              <a href={prismLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                {date}\n              </a>{' '}\n            </div>\n            <strong className=\"column column-10\" title={`0x${m.Author}`}>\n              {author}:\n            </strong>\n            <div className=\"column column-90\">{m.Message}</div>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Messages;\n","import React, { useState } from 'react';\n\nconst MessageInput = ({ onSend }) => {\n  const [message, setMessage] = useState('');\n\n  const sendAndClean = () => {\n    if (message) {\n      onSend(message);\n      setMessage('');\n    }\n  };\n\n  return (\n    <>\n      <br />\n      <textarea\n        rows=\"15\"\n        placeholder=\"What's up?\"\n        value={message}\n        onKeyPress={ev => ev.key === 'Enter' && sendAndClean()}\n        onChange={ev => setMessage(ev.target.value)}\n      />\n      <button onClick={sendAndClean}>Send</button>\n    </>\n  );\n};\n\nexport default MessageInput;\n","import './App.css';\nimport Messages from './Messages';\nimport MessageInput from './MessageInput';\nimport React, { useEffect, useState } from 'react';\nimport { Client, argString, argUint64 } from 'orbs-client-sdk/dist/index.es';\n\nconst App = ({\n  publicKey,\n  privateKey,\n  contractName,\n  channel,\n  nodeUrl,\n  virtualChainId,\n  prismUrl,\n  address\n}) => {\n  const [messages, setMessages] = useState({});\n\n  const orbsClient = new Client(`${nodeUrl}`, virtualChainId, 'TEST_NET');\n\n  const verifyResponse = response => {\n    if (\n      response.requestStatus !== 'COMPLETED' &&\n      response.executionResult !== 'SUCCESS' &&\n      response.transactionStatus !== 'COMMITTED'\n    ) {\n      console.error(response);\n      throw new Error(response);\n    }\n  };\n\n  let messagesCursor = 1;\n  const cursorLength = 5;\n\n  const fetchMessages = async () => {\n    const query = orbsClient.createQuery(\n      publicKey,\n      contractName,\n      'getMessagesForChannel',\n      [\n        argString(channel),\n        argUint64(messagesCursor),\n        argUint64(messagesCursor + cursorLength)\n      ]\n    );\n    try {\n      const response = await orbsClient.sendQuery(query);\n      verifyResponse(response);\n      const data = JSON.parse(response.outputArguments[0].value);\n      if (data && data.length) {\n        messagesCursor += data.length;\n        const newMessages = data.reduce((acc, curr) => {\n          acc[curr.ID] = curr;\n          acc[curr.ID].id = curr.ID;\n          return acc;\n        }, messages);\n        setMessages({ ...newMessages });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const submitMessage = async text => {\n    const [tx] = orbsClient.createTransaction(\n      publicKey,\n      privateKey,\n      contractName,\n      'sendMessageToChannel',\n      [argString(channel), argString(text)]\n    );\n\n    const response = await orbsClient.sendTransaction(tx);\n    verifyResponse(response);\n\n    console.log(response.outputArguments[0].value);\n  };\n\n  const REFRESH_RATE = 1 * 1000;\n\n  useEffect(() => {\n    fetchMessages();\n    setInterval(fetchMessages, REFRESH_RATE);\n  }, []);\n\n  return (\n    <main className=\"container\">\n      <nav className=\"navigation\">\n        <section className=\"container\">\n          <h1 className=\"title\">Conversation App</h1>\n          <div>your address: {address}</div>\n          <div>channel: {channel}</div>\n        </section>\n      </nav>\n      <Messages prismUrl={prismUrl} messages={messages} />\n      <MessageInput onSend={submitMessage} />\n    </main>\n  );\n};\n\nexport default App;\n","import './index.css';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createAccount,\n  decodeHex,\n  encodeHex\n} from 'orbs-client-sdk/dist/index.es';\n\nconst SENDER_PUBLIC_KEY = 'sender_public_key';\nconst SENDER_PRIVATE_KEY = 'sender_private_key';\nconst SENDER_ADDRESS = 'sender_address';\n\nconst virtualChainId = process.env.REACT_APP_VIRTUAL_CHAIN_ID || 42;\n\nconst config = {\n  nodeUrl:\n    process.env.NODE_ENV === 'production'\n      ? `${process.env.REACT_APP_ORBS_NODE_ADDRESS}/vchains/${virtualChainId}`\n      : process.env.REACT_APP_ORBS_NODE_ADDRESS,\n  virtualChainId,\n  contractName: 'orbs_conversation',\n  channel: 'orbs',\n  prismUrl: `https://prism.orbs-test.com/vchains/${virtualChainId}`\n};\n\nif (!localStorage.getItem(SENDER_PUBLIC_KEY)) {\n  const sender = createAccount();\n  localStorage.setItem(SENDER_PUBLIC_KEY, encodeHex(sender.publicKey));\n  localStorage.setItem(SENDER_PRIVATE_KEY, encodeHex(sender.privateKey));\n  localStorage.setItem(SENDER_ADDRESS, sender.address);\n}\n\nconfig['publicKey'] = decodeHex(localStorage.getItem(SENDER_PUBLIC_KEY));\nconfig['privateKey'] = decodeHex(localStorage.getItem(SENDER_PRIVATE_KEY));\nconfig['address'] = localStorage.getItem(SENDER_ADDRESS);\n\nReactDOM.render(<App {...config} />, document.getElementById('root'));\n"],"sourceRoot":""}